package contents;

import java.awt.Button;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.Timer;

/**
 * 
 * @author Austen Gregor
 * 
 * Created 08/17/2015
 */

public class FractalView
{
	private JFrame settings,canvas,instructions2;
	
	private JPanel settingsPane;
	private JPanel bgColorOuterPane,bgCustomColorCardPanel,bgCustomColorSubPane1,bgCustomColorSubPane2;
	private JPanel fractNumOuterPane,fractNumBlankPane;
	private JPanel lineOuterPane,lineBlankPane;
	private JPanel bgSeparator, fractNumberSeparator, lineLengthSeparator;
	private JPanel proceedingPanel;
	private JPanel back;
	
	private CardLayout bgCustomColorCardLayout;
	
	private JLabel bgColorLabel;
	private JLabel fractalNumberLabel;
	private JLabel lineLengthLabel1,lineLengthLabel2,lineLengthLabel3;
	
	private JComboBox bgColorOptions, fractalNumberOptions;
	
	private JTextField bgColorTextField, lineLengthTextField;
	
	private Button next;
	
	
	
	private JFrame fractSettings1,fractSettings2,fractSettings3,fractSettings4;
	
	private JPanel fractSettingsPanel1,fractSettingsPanel2,fractSettingsPanel3,fractSettingsPanel4;
	private JPanel fractColorOuterPanel1,fractColorOuterPanel2,fractColorOuterPanel3,fractColorOuterPanel4;
	
	private JPanel fractCustomColorCardPanel1,fractCustomColorSubPanel1_1,fractCustomColorSubPanel1_2;
	private JPanel fractCustomColorCardPanel2,fractCustomColorSubPanel2_1,fractCustomColorSubPanel2_2;
	private JPanel fractCustomColorCardPanel3,fractCustomColorSubPanel3_1,fractCustomColorSubPanel3_2;
	private JPanel fractCustomColorCardPanel4,fractCustomColorSubPanel4_1,fractCustomColorSubPanel4_2;
	
	private JPanel fractAnimationOuterPanel1,animationBlankPane1;
	private JPanel fractAnimationOuterPanel2,animationBlankPane2;
	private JPanel fractAnimationOuterPanel3,animationBlankPane3;
	private JPanel fractAnimationOuterPanel4,animationBlankPane4;
	
	private JPanel blankSeparatorPanel1_1,blankSeparatorPanel1_2;
	private JPanel blankSeparatorPanel2_1,blankSeparatorPanel2_2;
	private JPanel blankSeparatorPanel3_1,blankSeparatorPanel3_2;
	private JPanel blankSeparatorPanel4_1,blankSeparatorPanel4_2;
	
	private JPanel proceedingPanel1,proceedingPanel2,proceedingPanel3,proceedingPanel4;
	
	private CardLayout fractCustomColorCardLayout1,fractCustomColorCardLayout2,fractCustomColorCardLayout3,fractCustomColorCardLayout4;
	
	private JLabel fractColorLabel1,fractColorLabel2,fractColorLabel3,fractColorLabel4;
	private JLabel fractAnimationLabel1,fractAnimationLabel2,fractAnimationLabel3,fractAnimationLabel4;
	
	private JTextField fractCustomColorTextField1,fractCustomColorTextField2,fractCustomColorTextField3,fractCustomColorTextField4;
	
	private JComboBox fractColorOptions1,fractColorOptions2,fractColorOptions3,fractColorOptions4;
	private JComboBox animationOptions1,animationOptions2,animationOptions3,animationOptions4;
	
	private Button next1,next2,next3,next4;
	private Button back1,back2,back3,back4;
	
	private boolean isCreatingFract2,isCreatingFract3,isCreatingFract4;
	
	private GUIPanel drawing;
	
	
	
	private Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	private int width=screenSize.width;
	private int height=screenSize.height;
	
	private static ArrayList<Integer> fractArray1,fractArray2,fractArray3,fractArray4;
	
	private Color bgColor;

	private static Color fractColor1,fractColor2,fractColor3,fractColor4;
	
	private static Color[] RainbowArray;
	
	private Font font=new Font("Arial", Font.PLAIN, 30);
	
	private static boolean isAnimation1,isAnimation2,isAnimation3,isAnimation4;
	private static boolean isRainbowFract1,isRainbowFract2,isRainbowFract3,isRainbowFract4;
	
	private static int rainbowIndex=0;
	
	FractalView()
	{
		//Create the first frame and call it settings
		settings=new JFrame("Dragon Curve Settings");
		
		//Create the settings panel to hold all features
		settingsPane=new JPanel(new GridLayout(0,1));
		settingsPane.setBackground(Color.LIGHT_GRAY);
		
		//create a label asking the user to choose a background color for the fractal drawing
		bgColorLabel=new JLabel("Choose a background color");
		bgColorLabel.setFont(font);
		
		//add the label to the panel
		settingsPane.add(bgColorLabel);
		
		//create another panel to hold the user's background options
		bgColorOuterPane=new JPanel(new GridLayout(1,2));
		
		//create a drop-down box for users to choose a background color
		String [] bgString=new String[]{"Black","White","Custom"};
		bgColorOptions=new JComboBox(bgString);
		bgColorOptions.setFont(font);		
		
		//initialize values to match first menu item
		bgColor=Color.BLACK;
		
		//add the drop-down box to the panel
		bgColorOuterPane.add(bgColorOptions);
		
		//create a cardpanel to show a textfield if the user chooses 'Custom' from the drop-down menu
		bgCustomColorCardLayout=new CardLayout();
		bgCustomColorCardPanel=new JPanel(bgCustomColorCardLayout);
		
		//bgSubPane1 is a blank panel
		bgCustomColorSubPane1=new JPanel();
		bgCustomColorSubPane1.setBackground(Color.LIGHT_GRAY);
		
		//bgSubPane2 is a panel that holds a textfield for the user to input his/her own custom color value for the background
		bgCustomColorSubPane2=new JPanel(new GridLayout(1,1));
		bgColorTextField=new JTextField("000000");
		bgColorTextField.setFont(font);
		bgCustomColorSubPane2.add(bgColorTextField);
		
		//add both the blank panel and textfield to the card panel
		bgCustomColorCardPanel.add(bgCustomColorSubPane1,"1");
		bgCustomColorCardPanel.add(bgCustomColorSubPane2,"2");
		bgCustomColorCardLayout.show(bgCustomColorCardPanel, "1");
		
		//add the card panel to the outer panel
		bgColorOuterPane.add(bgCustomColorCardPanel);
		
		//finally add the outer panel to the setting panel of the main frame
		settingsPane.add(bgColorOuterPane);
		
		//create and add separation panel
		bgSeparator=new JPanel();
		bgSeparator.setBackground(Color.LIGHT_GRAY);
		settingsPane.add(bgSeparator);
		
		//create a label asking the user for the number of fractals to generate
		fractalNumberLabel=new JLabel("How many fractals do you want to generate?");
		fractalNumberLabel.setFont(font);
		
		//add the label to the main settings panel
		settingsPane.add(fractalNumberLabel);
		
		//create another panel to hold the number of fractals option
		fractNumOuterPane=new JPanel(new GridLayout(1,2));
		
		//create the number of fractals option drop-down menu
		String [] fractNumber=new String[]{"1","2","3","4"};
		fractalNumberOptions=new JComboBox(fractNumber);
		fractalNumberOptions.setSelectedItem("1");
		fractalNumberOptions.setFont(font);
		
		//add the options to the outer fractal number panel
		fractNumOuterPane.add(fractalNumberOptions);
		
		//create a blank panel to keep the formatting for the fractal number options
		fractNumBlankPane=new JPanel();
		fractNumBlankPane.setBackground(Color.LIGHT_GRAY);
		
		//add the blank panel
		fractNumOuterPane.add(fractNumBlankPane);
		
		//add the outer panel to the main settings panel
		settingsPane.add(fractNumOuterPane);
		
		//create a blank panel to separate user settings
		fractNumberSeparator=new JPanel();
		fractNumberSeparator.setBackground(Color.LIGHT_GRAY);
		
		//add the separator panel to the main settings panel
		settingsPane.add(fractNumberSeparator);		
		
		//create a line length label that briefly explains how the design is made and what to input
		lineLengthLabel1=new JLabel("The fractal is made with lines.");
		lineLengthLabel2=new JLabel("Smaller lenghts will appear more 'filled in'.");
		lineLengthLabel3=new JLabel("Choose a line length integer of '1' or higher.");
		lineLengthLabel1.setFont(font);
		lineLengthLabel2.setFont(font);
		lineLengthLabel3.setFont(font);
		
		//add the label to the main settings panel
		settingsPane.add(lineLengthLabel1);
		settingsPane.add(lineLengthLabel2);
		settingsPane.add(lineLengthLabel3);
		
		//to keep the same format as the above panels an outer line panel is created
		lineOuterPane=new JPanel(new GridLayout(1,2));
		
		//creates a text field for user's to input a line length
		lineLengthTextField=new JTextField("1");
		lineLengthTextField.setFont(font);
		
		//add the text field to the outer line panel
		lineOuterPane.add(lineLengthTextField);
		
		//this is a blank panel
		lineBlankPane=new JPanel();
		lineBlankPane.setBackground(Color.LIGHT_GRAY);
		
		//add blank panel to the outer line panel
		lineOuterPane.add(lineBlankPane);
		
		//add the outer panel to the main settings panel
		settingsPane.add(lineOuterPane);
		
		//create and add line length blank panel
		lineLengthSeparator=new JPanel();
		lineLengthSeparator.setBackground(Color.LIGHT_GRAY);
		
		settingsPane.add(lineLengthSeparator);
		
		//create a panel to hold next and back buttons. Because this is the first frame the back button will be a blank panel
		proceedingPanel1=new JPanel(new GridLayout(1,2));
		
		back=new JPanel();
		back.setBackground(Color.LIGHT_GRAY);
		
		//create a next button to check the user's settings and continue to the next frame
		next=new Button("Next");
		next.setFont(font);

		//add back and next to the proceeding panel
		proceedingPanel1.add(back1);
		proceedingPanel1.add(next1);
		
		//adds the button to the settings panel
		settingsPane.add(proceedingPanel1);
		
		//the main frame now adds the complete settings panel
		settings.add(settingsPane);
		settings.pack();
		settings.setVisible(true);
		settings.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		
	}

	public void createFractalSettings1() 
	{
		//create new JFrame
		fractSettings1=new JFrame("First Fractal Settings");
		
		//creates a settings panel for the first fractal to edit color, etc.
		fractSettingsPanel1=new JPanel(new GridLayout(0,1));
		fractSettingsPanel1.setBackground(Color.LIGHT_GRAY);
		
		//create a label asking for a color of the first fractal
		fractColorLabel1=new JLabel("Choose a fractal color");
		fractColorLabel1.setFont(font);
		
		//add the fractal label to the main panel
		fractSettingsPanel1.add(fractColorLabel1);
		
		//create another panel to hold the user's fractal color options
		fractColorOuterPanel1=new JPanel(new GridLayout(1,2));
		
		//create a drop-down menu for the user's fractal color options
		String [] fractColorString1=new String[]{"Red","Orange","Yellow","Green","Blue","Purple","Rainbow","Custom"};
		fractColorOptions1=new JComboBox(fractColorString1);
		fractColorOptions1.setFont(font);
		
		//initialize colors to match initial settings
		fractColor1=Color.RED;
		isRainbowFract1=false;
		
		//add the drop-down menu to the outer fractal panel 
		fractColorOuterPanel1.add(fractColorOptions1);
		
		//create a blank panel to separate the color option from the animation option
		blankSeparatorPanel1_1=new JPanel();
		blankSeparatorPanel1_1.setBackground(Color.LIGHT_GRAY);
		
		//add the blank panel
		fractSettingsPanel1.add(blankSeparatorPanel1_1);
		
		//create a card panel like that of the background card panel
		fractCustomColorCardLayout1=new CardLayout();
		fractCustomColorCardPanel1=new JPanel(fractCustomColorCardLayout1);
		
		//this is a blank panel
		fractCustomColorSubPanel1_1=new JPanel();
		fractCustomColorSubPanel1_1.setBackground(Color.LIGHT_GRAY);
		
		//this is a textfield that appears if the user chooses 'Custom' from the drop-down menu
		fractCustomColorSubPanel1_2=new JPanel(new GridLayout(1,1));
		fractCustomColorTextField1=new JTextField("ffffff");
		fractCustomColorTextField1.setFont(font);
		fractCustomColorSubPanel1_2.add(fractCustomColorTextField1);
		
		//adds both the blank panel and the textfield to the card panel
		fractCustomColorCardPanel1.add(fractCustomColorSubPanel1_1,"1");
		fractCustomColorCardPanel1.add(fractCustomColorSubPanel1_2,"2");
		fractCustomColorCardLayout1.show(fractCustomColorCardPanel1, "1");
		
		//add the card panel to the outer panel
		fractColorOuterPanel1.add(fractCustomColorCardPanel1);
		
		//add the outer panel to the first fractal settings panel
		fractSettingsPanel1.add(fractColorOuterPanel1);
		
		//create a label asking if the fractal should be drawn in real time or drawn instantly
		fractAnimationLabel1=new JLabel("Do you want to see the fractal's drawing animation?");
		fractAnimationLabel1.setFont(font);
		
		//add the label to the fractal settings panel
		fractSettingsPanel1.add(fractAnimationLabel1);
		
		fractAnimationOuterPanel1=new JPanel(new GridLayout(1,2));
		
		//create animation option menu
		String[] animationString1=new String[]{"NO","YES"};
		animationOptions1=new JComboBox(animationString1);
		animationOptions1.setFont(font);
		
		//initialize option to match first menu item
		isAnimation1=false;
		
		//add animation option menu to outer animation panel
		fractAnimationOuterPanel1.add(animationOptions1);
		
		//create a blank panel to add in line with the options menu to keep formatting
		animationBlankPane1=new JPanel();
		animationBlankPane1.setBackground(Color.LIGHT_GRAY);
		
		//add blank panel to the outer animation panel
		fractAnimationOuterPanel1.add(animationBlankPane1);
		
		//add outer animation panel to fractal settings panel
		fractSettingsPanel1.add(fractAnimationOuterPanel1);
		
		//create a blank panel to separate the animation panel from the proceeding panel
		blankSeparatorPanel1_2=new JPanel();
		blankSeparatorPanel1_2.setBackground(Color.LIGHT_GRAY);
		
		//add the blank panel
		fractSettingsPanel1.add(blankSeparatorPanel1_2);
		
		//create a panel to hold next and back buttons.
		proceedingPanel1=new JPanel(new GridLayout(1,2));
		
		back1=new Button("Back");
		back1.setFont(font);
		
		//create a next button to check the user's settings and continue to the next frame
		next1=new Button("Next");
		next1.setFont(font);

		//add back and next to the proceeding panel
		proceedingPanel1.add(back1);
		proceedingPanel1.add(next1);
		
		//add the proceeding panel to the
		fractSettingsPanel1.add(proceedingPanel2);
		
		//add fractSettingsPane1 to the settings frame
		fractSettings1.add(fractSettingsPanel1);
		
		//set the frame to be visible
		fractSettings1.setVisible(true);
		fractSettings1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		fractSettings1.pack();
		
		settings.setVisible(false);
	}
	
	//methods that the controller uses to help add functionality to the background options
	public CardLayout getBG_Layout()
	{
		return bgCustomColorCardLayout;
	}
	public JPanel getBG_CardPanel()
	{
		return bgCustomColorCardPanel;
	}
	public void addBG_Color_Listener(ActionListener al)
	{
		bgColorOptions.addActionListener(al);
	}
	
	//getter and setter methods for background options
	public String getBG_Text()
	{
		return bgColorTextField.getText();
	}
	public Color getBG_Color()
	{
		return bgColor;
	}
	public void setBG_Color(String s)
	{
		int r,g,b;
		r=Integer.decode("0x"+s.charAt(0)+""+s.charAt(1));
		g=Integer.decode("0x"+s.charAt(2)+""+s.charAt(3));
		b=Integer.decode("0x"+s.charAt(4)+""+s.charAt(5));
		
		bgColor=new Color(r,g,b);
	}
	
	//add action listener to number options
	public void addFractNumberListener(ActionListener al) 
	{
		fractalNumberOptions.addActionListener(al);
	}

	//getter methods for line length options
	public String getLineLengthText()
	{
		return lineLengthTextField.getText();
	}
	
	//adds an action listener to the next button
	public void addNextButtonListener(ActionListener al)
	{
		next.addActionListener(al);
	}
	
	//methods that display warnings if the user does not correctly fill out the settings frame
	public void displayBGWarning() 
	{
		JOptionPane.showMessageDialog(null,"Please input a 6 character long string of an RGB value for the custom background color. (E.G. '00CCFF')");
	}
	public void displayFractWarning() 
	{
		JOptionPane.showMessageDialog(null,"Please input a 6 character long string of an RGB value for the custom fractal color. (E.G. '00CCFF')");
	}
	public void displayLineWarning() 
	{
		JOptionPane.showMessageDialog(null,"Please input an integer of '1' or higher. (E.G. '3')");
	}
	
	
	public CardLayout getFract_Layout1()
	{
		return fractCustomColorCardLayout1;
	}
	public JPanel getFract_CardPanel1()
	{
		return fractCustomColorCardPanel1;
	}
	public void addFract_Color_Listener1(ActionListener al)
	{
		fractColorOptions1.addActionListener(al);
	}
	
	//getter and setter methods for fractal color options
	public String getFract1Color_Text()
	{
		return fractCustomColorTextField1.getText();
	}
	public Color getFract1_Color()
	{
		return fractColor1;
	}
	public void setFract1_Color(String s)
	{
		int r,g,b;
		r=Integer.decode("0x"+s.charAt(0)+""+s.charAt(1));
		g=Integer.decode("0x"+s.charAt(2)+""+s.charAt(3));
		b=Integer.decode("0x"+s.charAt(4)+""+s.charAt(5));
		
		fractColor1=new Color(r,g,b);
	}
	
	public void setAnimationOption(boolean b)
	{
		isAnimation1=b;
	}
	
	public void addAnimationOptionListener1(ActionListener al)
	{
		animationOptions1.addActionListener(al);
	}
	
	public void addBack1Listener(ActionListener al)
	{
		back1.addActionListener(al);
	}
	public void disposeFract1()
	{
		settings.setVisible(true);
		fractSettings1.dispose();
	}
	
	public void addNext1Listener(ActionListener al)
	{
		next1.addActionListener(al);
	}
	
	
	public void createFractalSettings2() 
	{
		//create new JFrame
		fractSettings2=new JFrame("Second Fractal Settings");
		
		//creates a settings panel for the first fractal to edit color, etc.
		fractSettingsPanel2=new JPanel(new GridLayout(0,1));
		fractSettingsPanel2.setBackground(Color.LIGHT_GRAY);
		
		//create a label asking for a color of the first fractal
		fractColorLabel2=new JLabel("Choose a fractal color");
		fractColorLabel2.setFont(font);
		
		//add the fractal label to the main panel
		fractSettingsPanel2.add(fractColorLabel2);
		
		//create another panel to hold the user's fractal color options
		fractColorOuterPanel2=new JPanel(new GridLayout(1,2));
		
		//create a drop-down menu for the user's fractal color options
		String [] fractColorString2=new String[]{"Red","Orange","Yellow","Green","Blue","Purple","Rainbow","Custom"};
		fractColorOptions2=new JComboBox(fractColorString2);
		fractColorOptions2.setFont(font);
		
		//initialize colors to match initial settings
		fractColor2=Color.RED;
		isRainbowFract2=false;
		
		//add the drop-down menu to the outer fractal panel 
		fractColorOuterPanel2.add(fractColorOptions2);
		
		//create a blank panel to separate the color option from the animation option
		blankSeparatorPanel2_1=new JPanel();
		blankSeparatorPanel2_1.setBackground(Color.LIGHT_GRAY);
		
		//add the blank panel
		fractSettingsPanel2.add(blankSeparatorPanel2_1);
		
		//create a card panel like that of the background card panel
		fractCustomColorCardLayout2=new CardLayout();
		fractCustomColorCardPanel2=new JPanel(fractCustomColorCardLayout2);
		
		//this is a blank panel
		fractCustomColorSubPanel2_1=new JPanel();
		fractCustomColorSubPanel2_1.setBackground(Color.LIGHT_GRAY);
		
		//this is a textfield that appears if the user chooses 'Custom' from the drop-down menu
		fractCustomColorSubPanel2_2=new JPanel(new GridLayout(1,1));
		fractCustomColorTextField2=new JTextField("ffffff");
		fractCustomColorTextField2.setFont(font);
		fractCustomColorSubPanel2_2.add(fractCustomColorTextField2);
		
		//adds both the blank panel and the textfield to the card panel
		fractCustomColorCardPanel2.add(fractCustomColorSubPanel2_1,"1");
		fractCustomColorCardPanel2.add(fractCustomColorSubPanel2_2,"2");
		fractCustomColorCardLayout2.show(fractCustomColorCardPanel2, "1");
		
		//add the card panel to the outer panel
		fractColorOuterPanel2.add(fractCustomColorCardPanel2);
		
		//add the outer panel to the first fractal settings panel
		fractSettingsPanel2.add(fractColorOuterPanel2);
		
		//create a label asking if the fractal should be drawn in real time or drawn instantly
		fractAnimationLabel2=new JLabel("Do you want to see the fractal's drawing animation?");
		fractAnimationLabel2.setFont(font);
		
		//add the label to the fractal settings panel
		fractSettingsPanel2.add(fractAnimationLabel1);
		
		fractAnimationOuterPanel2=new JPanel(new GridLayout(1,2));
		
		//create animation option menu
		String[] animationString2=new String[]{"NO","YES"};
		animationOptions2=new JComboBox(animationString2);
		animationOptions2.setFont(font);
		
		//initialize option to match first menu item
		isAnimation2=false;
		
		//add animation option menu to outer animation panel
		fractAnimationOuterPanel2.add(animationOptions2);
		
		//create a blank panel to add in line with the options menu to keep formatting
		animationBlankPane2=new JPanel();
		animationBlankPane2.setBackground(Color.LIGHT_GRAY);
		
		//add blank panel to the outer animation panel
		fractAnimationOuterPanel2.add(animationBlankPane2);
		
		//add outer animation panel to fractal settings panel
		fractSettingsPanel2.add(fractAnimationOuterPanel2);
		
		//create a blank panel to separate the animation panel from the proceeding panel
		blankSeparatorPanel2_2=new JPanel();
		blankSeparatorPanel2_2.setBackground(Color.LIGHT_GRAY);
		
		//add the blank panel
		fractSettingsPanel2.add(blankSeparatorPanel2_2);
		
		//create a panel to hold next and back buttons.
		proceedingPanel2=new JPanel(new GridLayout(1,2));
		
		back2=new Button("Back");
		back2.setFont(font);
		
		//create a next button to check the user's settings and continue to the next frame
		next2=new Button("Next");
		next2.setFont(font);

		//add back and next to the proceeding panel
		proceedingPanel2.add(back2);
		proceedingPanel2.add(next2);
		
		//add the proceeding panel to the
		fractSettingsPanel2.add(proceedingPanel2);
		
		//add fractSettingsPane1 to the settings frame
		fractSettings2.add(fractSettingsPanel2);
		
		//set the frame to be visible
		fractSettings2.setVisible(true);
		fractSettings2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		fractSettings2.pack();
		
		fractSettings1.setVisible(false);
	}
	

	
	
	
	

	//creates the graphics panel for drawing the fractal
	public void createDrawingPanel()
	{
		canvas=new JFrame("Drawing");
		canvas.setSize(width, height);
		drawing=new GUIPanel(getBG_Color(),getFract1_Color());
		canvas.add(drawing);
		canvas.setVisible(true);
		canvas.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		fractSettings1.setVisible(false);
	}
	
	//add a window listener to the canvas to help close the window while graphics are still working
	public void addDrawingWindowListener(WindowListener wl)
	{
		canvas.addWindowListener(wl);
	}
	//sets the fractal array so the paint method has all the points to draw from
	public void setFractArray1(ArrayList<Integer> arr)
	{
		fractArray1=arr;
	}
	
	
	
	
	//class that creates a custom panel with graphics
	static class GUIPanel extends JPanel implements ActionListener
	{
		private Color bg,fract;
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		BufferedImage buffer;
		Timer t=new Timer(0, this);
		int index;
		private GUIPanel(Color bgColor, Color fractColor)
		{
			index=0;
			bg=bgColor;
			fract=fractColor;
			
			setBackground(bgColor);
			
			buffer = new BufferedImage(screenSize.width, screenSize.height, BufferedImage.TYPE_INT_ARGB);
		}
		
		@Override
		public void paint(Graphics g)
		{
			super.paint(g);
			g.setColor(fract);
			
			if(isAnimation1)
			{
				t.start();
				g.drawImage(buffer, 0, 0, this);
			}
			else
			{
				if(isRainbowFract1)
				{
					for(int i=0;i<fractArray1.size()-2;i+=2)
					{
						g.setColor(RainbowArray[rainbowIndex]);
						g.drawLine(fractArray1.get(i), fractArray1.get(i+1), fractArray1.get(i+2), fractArray1.get(i+3));
						//g.drawLine(c2.get(i), c2.get(i+1), c2.get(i+2), c2.get(i+3));
						//g.setColor(spectrum[359-x]);
						//g.drawLine(c3.get(i), c3.get(i+1), c3.get(i+2), c3.get(i+3));
						//g.drawLine(c4.get(i), c4.get(i+1), c4.get(i+2), c4.get(i+3));
						
						//4 is a color modifier to make it more or less random 
						//add a setting for the user to change this later
						if(rainbowIndex<359 && i%4==0)
						{
							rainbowIndex++;
						}
						else if(rainbowIndex>=359)
						{
							rainbowIndex=0;
						}
					}
				}
				else
				{
					for(int i=0;i<fractArray1.size()-2;i+=2)
					{
						
						g.drawLine(fractArray1.get(i), fractArray1.get(i+1), fractArray1.get(i+2), fractArray1.get(i+3));
					}
				}
			}
			
		}
		@Override
		public void actionPerformed(ActionEvent e) 
		{
			nextLine(buffer.getGraphics());
		}

		private void nextLine(Graphics g) 
		{
			if(index<fractArray1.size()-2)
			{
				if(isRainbowFract1)
				{
					g.setColor(RainbowArray[rainbowIndex]);
					g.drawLine(fractArray1.get(index), fractArray1.get(index+1), fractArray1.get(index+2), fractArray1.get(index+3));
					index+=2;
					if(rainbowIndex<359 && index%4==0)
					{
						rainbowIndex++;
					}
					else if(rainbowIndex>=359)
					{
						rainbowIndex=0;
					}
					
				}
				else
				{
					g.setColor(fractColor1);
					g.drawLine(fractArray1.get(index), fractArray1.get(index+1), fractArray1.get(index+2), fractArray1.get(index+3));
					index+=2;
				}
				repaint();
			}
			else
			{
				t.stop();
				index=0;
			}
		}
	}

	public GUIPanel getDrawingPanel() 
	{
		return drawing;
	}
	public JFrame getDrawingFrame()
	{
		return canvas;
	}

	public void disposeDrawing() 
	{
		canvas.dispose();
		settings.setVisible(true);
	}

	public void setFractColorArray(Color[] rainbow) 
	{
		RainbowArray=rainbow;
	}

	public void setRainbowBool(boolean b) 
	{
		isRainbowFract1=b;
	}

	

	

	
	
}
