package contents;

import java.awt.Button;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.Timer;

/**
 * 
 * @author Austen Gregor
 * 
 * Created 08/17/2015
 */

public class FractalView
{
	private JFrame settings,instructions,instructions2;
	
	private JPanel settingsPane;
	private JPanel bgOuterPane,bgCardPane,bgSubPane1,bgSubPane2;
	private JPanel fractNumOuterPane,fractNumBlankPane;
	private JPanel lineOuterPane,lineBlankPane;
	private JPanel bgSeparator, fractNumberSeparator, lineLengthSeparator;
	private JPanel proceedingPanel1,proceedingPanel2,proceedingPanel3,proceedingPanel4;
	
	private CardLayout bgCardLayout;
	
	private JLabel bgLabel;
	private JLabel fractalNumberLabel;
	private JLabel lineLengthLabel1,lineLengthLabel2,lineLengthLabel3;
	
	private JComboBox bgOptions, fractalNumberOptions;
	
	private JTextField bgTextField, lineTextField;
	
	private Button next1;
	
	
	
	private JFrame fractSettings1;
	
	private JPanel fractSettingsPane1;
	private JPanel fractOuterPane1,fractCardPane1,fractInnerPane1_1,fractInnerPane1_2;
	private JPanel fractColorSeparator,fractColorBlankPane1;
	private JPanel fractAnimationOuterPane1,animationBlankPane1;
	private JPanel back1,blankPanel;
	private CardLayout fractRainbowCardLayout1;
	private JPanel fractRainbowPane1;
	private JPanel fractRainbowSubPane1_1;
	private JComboBox fractColorOptions1, animationOptions1;
	
	private JLabel fractLabel1;
	
	private GUIPanel drawing;
	
	private CardLayout fractColorCardLayout1;

	private JPanel fractRainbowSubPane1_2;
	
	private JPanel rainbowBlankPane1_1,rainbowBlankPane1_2;
	
	private JLabel randomFactor1_1, randomFactor1_2,fractAnimationLabel1;
	
	private JComboBox randomFactorOptions;
	
	
	private Button next2,back2;
	
	private JTextField fractColorTextField1;
	
	private Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	private int width=screenSize.width;
	private int height=screenSize.height;
	
	private static ArrayList<Integer> fractArray;
	private Color bgColor;

	private static Color fractColor1;
	
	private static Color[] fractRainbow;
	
	private Font font=new Font("Arial", Font.PLAIN, 30);
	
	private static boolean isTimerDelay;
	private static boolean isRainbowFract1;
	
	private static int rainbowIndex=0;
	
	FractalView()
	{
		//Create the first frame and call it settings
		settings=new JFrame("Dragon Curve Settings");
		
		//Create the settings panel to hold all features
		settingsPane=new JPanel(new GridLayout(0,1));
		settingsPane.setBackground(Color.LIGHT_GRAY);
		
		//create a label asking the user to choose a background color for the fractal drawing
		bgLabel=new JLabel("Choose a background color");
		bgLabel.setFont(font);
		
		//add the label to the panel
		settingsPane.add(bgLabel);
		
		//create another panel to hold the user's background options
		bgOuterPane=new JPanel(new GridLayout(1,2));
		
		//create a drop-down box for users to choose a background color
		String [] bgString=new String[]{"Black","White","Custom"};
		bgOptions=new JComboBox(bgString);
		bgOptions.setSelectedItem("Black");
		bgOptions.setFont(font);		
		
		//add the drop-down box to the panel
		bgOuterPane.add(bgOptions);
		
		//create a cardpanel to show a textfield if the user chooses 'Custom' from the drop-down menu
		bgCardLayout=new CardLayout();
		bgCardPane=new JPanel(bgCardLayout);
		
		//bgSubPane1 is a blank panel
		bgSubPane1=new JPanel();
		bgSubPane1.setBackground(Color.LIGHT_GRAY);
		
		//bgSubPane2 is a panel that holds a textfield for the user to input his/her own custom color value for the background
		bgSubPane2=new JPanel(new GridLayout(1,1));
		bgTextField=new JTextField("000000");
		bgTextField.setFont(font);
		bgSubPane2.add(bgTextField);
		
		//add both the blank panel and textfield to the card panel
		bgCardPane.add(bgSubPane1,"1");
		bgCardPane.add(bgSubPane2,"2");
		bgCardLayout.show(bgCardPane, "1");
		
		//add the card panel to the outer panel
		bgOuterPane.add(bgCardPane);
		
		//finally add the outer panel to the setting panel of the main frame
		settingsPane.add(bgOuterPane);
		
		//create and add separation panel
		bgSeparator=new JPanel();
		bgSeparator.setBackground(Color.LIGHT_GRAY);
		settingsPane.add(bgSeparator);
		
		//create a label asking the user for the number of fractals to generate
		fractalNumberLabel=new JLabel("How many fractals do you want to generate?");
		fractalNumberLabel.setFont(font);
		
		//add the label to the main settings panel
		settingsPane.add(fractalNumberLabel);
		
		//create another panel to hold the number of fractals option
		fractNumOuterPane=new JPanel(new GridLayout(1,2));
		
		//create the number of fractals option drop-down menu
		String [] fractNumber=new String[]{"1","2","3","4"};
		fractalNumberOptions=new JComboBox(fractNumber);
		fractalNumberOptions.setSelectedItem("1");
		fractalNumberOptions.setFont(font);
		
		//add the options to the outer fractal number panel
		fractNumOuterPane.add(fractalNumberOptions);
		
		//create a blank panel to keep the formatting for the fractal number options
		fractNumBlankPane=new JPanel();
		fractNumBlankPane.setBackground(Color.LIGHT_GRAY);
		
		//add the blank panel
		fractNumOuterPane.add(fractNumBlankPane);
		
		//add the outer panel to the main settings panel
		settingsPane.add(fractNumOuterPane);
		
		//create a blank panel to separate user settings
		fractNumberSeparator=new JPanel();
		fractNumberSeparator.setBackground(Color.LIGHT_GRAY);
		
		//add the separator panel to the main settings panel
		settingsPane.add(fractNumberSeparator);		
		
		//create a line length label that briefly explains how the design is made and what to input
		lineLengthLabel1=new JLabel("The fractal is made with lines.");
		lineLengthLabel2=new JLabel("Smaller lenghts will appear more 'filled in'.");
		lineLengthLabel3=new JLabel("Choose a line length integer of '1' or higher.");
		lineLengthLabel1.setFont(font);
		lineLengthLabel2.setFont(font);
		lineLengthLabel3.setFont(font);
		
		//add the label to the main settings panel
		settingsPane.add(lineLengthLabel1);
		settingsPane.add(lineLengthLabel2);
		settingsPane.add(lineLengthLabel3);
		
		//to keep the same format as the above panels an outer line panel is created
		lineOuterPane=new JPanel(new GridLayout(1,2));
		
		//creates a text field for user's to input a line length
		lineTextField=new JTextField("1");
		lineTextField.setFont(font);
		
		//add the text field to the outer line panel
		lineOuterPane.add(lineTextField);
		
		//this is a blank panel
		lineBlankPane=new JPanel();
		lineBlankPane.setBackground(Color.LIGHT_GRAY);
		
		//add blank panel to the outer line panel
		lineOuterPane.add(lineBlankPane);
		
		//add the outer panel to the main settings panel
		settingsPane.add(lineOuterPane);
		
		//create and add line length blank panel
		lineLengthSeparator=new JPanel();
		lineLengthSeparator.setBackground(Color.LIGHT_GRAY);
		
		settingsPane.add(lineLengthSeparator);
		
		/*
		//add timer delay label to explain what it does
		timerDelayLabel1=new JLabel("Having a delay will show the drawing animation.");
		timerDelayLabel1.setFont(font);
		
		//add this label to ask the user if he/she wants the delay to happen
		timerDelayLabel2=new JLabel("Do you want to see the fractal drawn in real time?");
		timerDelayLabel2.setFont(font);
		
		//add timer labels to the main pane
		settingsPane.add(timerDelayLabel1);
		settingsPane.add(timerDelayLabel2);
		
		//create an outter panel for the timerOptions
		timerOuterPane=new JPanel(new GridLayout(1,2));
		
		//create timer delay options of yes or no
		String[] timerOptionString=new String[] {"NO","YES"};
		timerOptions=new JComboBox(timerOptionString);
		timerOptions.setFont(font);
		
		//create a panel to hold the ComboBox
		timerInnerPane1=new JPanel(new GridLayout(1,1));
		
		//add timer comboBox to inner panel 1
		timerInnerPane1.add(timerOptions);
		
		//add first inner panel to outer panel
		timerOuterPane.add(timerInnerPane1);
		
		//create blank panel to keep format
		timerInnerPane2=new JPanel();
		timerInnerPane2.setBackground(Color.LIGHT_GRAY);
		
		//add blank panel to outer panel
		timerOuterPane.add(timerInnerPane2);
		
		//add the outer panel to the main settings panel
		settingsPane.add(timerOuterPane);
		
		//initialize option to be NO
		isTimerDelay=false;
		
		*/
		
		//create a panel to hold next and back buttons. Because this is the first frame the back button will be a blank panel
		proceedingPanel1=new JPanel(new GridLayout(1,2));
		
		back1=new JPanel();
		back1.setBackground(Color.LIGHT_GRAY);
		
		//create a next button to check the user's settings and continue to the next frame
		next1=new Button("Next");
		next1.setFont(font);

		//add back and next to the proceeding panel
		proceedingPanel1.add(back1);
		proceedingPanel1.add(next1);
		
		//adds the button to the settings panel
		settingsPane.add(proceedingPanel1);
		
		//the main frame now adds the complete settings panel
		settings.add(settingsPane);
		settings.pack();
		settings.setVisible(true);
		settings.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		
	}

	public void createFractalSettings1() 
	{
		//create new JFrame
		fractSettings1=new JFrame("First Fractal Settings");
		
		//creates a settings panel for the first fractal to edit color, etc.
		fractSettingsPane1=new JPanel(new GridLayout(0,1));
		fractSettingsPane1.setBackground(Color.LIGHT_GRAY);
		
		//create a label asking for a color of the first fractal
		fractLabel1=new JLabel("Choose a fractal color");
		fractLabel1.setFont(font);
		
		//add the fractal label to the main panel
		fractSettingsPane1.add(fractLabel1);
		
		//create another panel to hold the user's fractal color options
		fractOuterPane1=new JPanel(new GridLayout(1,2));
		
		//create a drop-down menu for the user's fractal color options
		String [] fractString1=new String[]{"Red","Orange","Yellow","Green","Blue","Purple","Rainbow","Custom"};
		fractColorOptions1=new JComboBox(fractString1);
		fractColorOptions1.setSelectedItem("Red");
		fractColorOptions1.setFont(font);
		
		//initialize colors to match initial settings
		isRainbowFract1=false;
		
		//add the drop-down menu to the outer fractal panel 
		fractOuterPane1.add(fractColorOptions1);
		
		//create a card panel like that of the background card panel
		fractColorCardLayout1=new CardLayout();
		fractCardPane1=new JPanel(fractColorCardLayout1);
		
		//this is a blank panel
		fractInnerPane1_1=new JPanel();
		fractInnerPane1_1.setBackground(Color.LIGHT_GRAY);
		
		//this is a textfield that appears if the user chooses 'Custom' from the drop-down menu
		fractInnerPane1_2=new JPanel(new GridLayout(1,1));
		fractColorTextField1=new JTextField("ffffff");
		fractColorTextField1.setFont(font);
		fractInnerPane1_2.add(fractColorTextField1);
		
		//adds both the blank panel and the textfield to the card panel
		fractCardPane1.add(fractInnerPane1_1,"1");
		fractCardPane1.add(fractInnerPane1_2,"2");
		fractColorCardLayout1.show(fractCardPane1, "1");
		
		//add the card panel to the outer panel
		fractOuterPane1.add(fractCardPane1);
		
		//add the outer panel to the first fractal settings panel
		fractSettingsPane1.add(fractOuterPane1);
		
		//create a label asking if the fractal should be drawn in real time or drawn instantly
		fractAnimationLabel1=new JLabel("Do you want to see the fractal's drawing animation?");
		fractAnimationLabel1.setFont(font);
		
		//add the label to the fractal settings panel
		fractSettingsPane1.add(fractAnimationLabel1);
		
		fractAnimationOuterPane1=new JPanel(new GridLayout(1,2));
		
		//create animation option menu
		String[] animationString1=new String[]{"NO","YES"};
		animationOptions1=new JComboBox(animationString1);
		animationOptions1.setSelectedItem("NO");
		animationOptions1.setFont(font);
		
		//add animation option menu to outer animation panel
		fractAnimationOuterPane1.add(animationOptions1);
		
		//create a blank panel to add in line with the options menu to keep formatting
		animationBlankPane1=new JPanel();
		animationBlankPane1.setBackground(Color.LIGHT_GRAY);
		
		//add blank panel to the outer animation panel
		fractAnimationOuterPane1.add(animationBlankPane1);
		
		//add outer animation panel to fractal settings panel
		fractSettingsPane1.add(fractAnimationOuterPane1);
		
		//create a blank panel to separate the animation panel from the proceeding panel
		blankPanel=new JPanel();
		blankPanel.setBackground(Color.LIGHT_GRAY);
		
		//add blank panel
		fractSettingsPane1.add(blankPanel);
		
		//create a panel to hold next and back buttons.
		proceedingPanel2=new JPanel(new GridLayout(1,2));
		
		back2=new Button("Back");
		back2.setFont(font);
		
		//create a next button to check the user's settings and continue to the next frame
		next2=new Button("Next");
		next2.setFont(font);

		//add back and next to the proceeding panel
		proceedingPanel2.add(back2);
		proceedingPanel2.add(next2);
		
		//add the procedding panel to the
		fractSettingsPane1.add(proceedingPanel2);
		
		//add fractSettingsPane1 to the settings frame
		fractSettings1.add(fractSettingsPane1);
		
		//set the frame to be visible
		fractSettings1.setVisible(true);
		fractSettings1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		fractSettings1.pack();
		
		settings.setVisible(false);
	}
	
	//methods that the controller uses to help add functionality to the background options
	public CardLayout getBG_Layout()
	{
		return bgCardLayout;
	}
	public JPanel getBG_CardPanel()
	{
		return bgCardPane;
	}
	public void addBG_Color_Listener(ActionListener al)
	{
		bgOptions.addActionListener(al);
	}
	
	//getter and setter methods for background options
	public String getBG_Text()
	{
		return bgTextField.getText();
	}
	public Color getBG_Color()
	{
		return bgColor;
	}
	public void setBG_Color(String s)
	{
		int r,g,b;
		r=Integer.decode("0x"+s.charAt(0)+""+s.charAt(1));
		g=Integer.decode("0x"+s.charAt(2)+""+s.charAt(3));
		b=Integer.decode("0x"+s.charAt(4)+""+s.charAt(5));
		
		bgColor=new Color(r,g,b);
	}
	
	//add action listener to number options
	public void addFractNumberListener(ActionListener al) 
	{
		fractalNumberOptions.addActionListener(al);
	}

	//getter methods for line length options
	public String getLineLengthText()
	{
		return lineTextField.getText();
	}
		
	//getter and setter methods for fractal color options
	public String getFract1Color_Text()
	{
		return fractColorTextField1.getText();
	}
	public Color getFract1_Color()
	{
		return fractColor1;
	}
	public void setFract1_Color(String s)
	{
		int r,g,b;
		r=Integer.decode("0x"+s.charAt(0)+""+s.charAt(1));
		g=Integer.decode("0x"+s.charAt(2)+""+s.charAt(3));
		b=Integer.decode("0x"+s.charAt(4)+""+s.charAt(5));
		
		fractColor1=new Color(r,g,b);
	}
	
	public CardLayout getFract_Layout1()
	{
		return fractColorCardLayout1;
	}
	public JPanel getFract_CardPanel1()
	{
		return fractCardPane1;
	}
	public void addFract_Color_Listener1(ActionListener al)
	{
		fractColorOptions1.addActionListener(al);
	}
	
	
	//todo add fract 2-4 methods
	
	
	
	//getter and setter methods for fractal 1 options
	public String getFract_Text1()
	{
		return fractColorTextField1.getText();
	}
	public Color getFract_Color1()
	{
		return fractColor1;
	}
	public void setFract_Color1(String s)
	{
		int r,g,b;
		r=Integer.decode("0x"+s.charAt(0)+""+s.charAt(1));
		g=Integer.decode("0x"+s.charAt(2)+""+s.charAt(3));
		b=Integer.decode("0x"+s.charAt(4)+""+s.charAt(5));
		fractColor1=new Color(r,g,b);
	}
	
	
	
	//methods that help the controller add functionality to the timer delay options
	public void addTimerDelay_Listener(ActionListener al)
	{
		//timerOptions.addActionListener(al);
	}
	public void setTimerDelayOption(boolean b)
	{
		isTimerDelay=b;
	}
	
	//methods that display warnings if the user does not correctly fill out the settings frame
	public void displayBGWarning() 
	{
		JOptionPane.showMessageDialog(null,"Please input a 6 character long string of an RGB value for the custom background color. (E.G. '00CCFF')");
	}
	public void displayFractWarning() 
	{
		JOptionPane.showMessageDialog(null,"Please input a 6 character long string of an RGB value for the custom background color. (E.G. '00CCFF')");
	}
	public void displayLineWarning() 
	{
		JOptionPane.showMessageDialog(null,"Please input an integer of '1' or higher. (E.G. '3')");
	}
	
	//adds an action listener to the next button
	public void addNext1ButtonListener(ActionListener al)
	{
		next1.addActionListener(al);
	}

	//creates the graphics panel for drawing the fractal
	public void createDrawingPanel()
	{
		instructions=new JFrame("Drawing");
		instructions.setSize(width, height);
		drawing=new GUIPanel(getBG_Color(),getFract_Color1());
		instructions.add(drawing);
		drawing.requestFocus();
		instructions.setVisible(true);
		settings.setVisible(false);
	}
	
	//add a window listener to the canvas to help close the window while graphics are still working
	public void addDrawingWindowListener(WindowListener wl)
	{
		instructions.addWindowListener(wl);
	}
	//sets the fractal array so the paint method has all the points to draw from
	public void setFractArray(ArrayList<Integer> arr)
	{
		fractArray=arr;
	}
	
	
	
	
	//class that creates a custom panel with graphics
	static class GUIPanel extends JPanel implements ActionListener
	{
		private Color bg,fract;
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		BufferedImage buffer;
		Timer t=new Timer(0, this);
		int index;
		private GUIPanel(Color bgColor, Color fractColor)
		{
			index=0;
			bg=bgColor;
			fract=fractColor;
			this.setBackground(bgColor);
			buffer = new BufferedImage(screenSize.width, screenSize.height, BufferedImage.TYPE_INT_ARGB);
			
		}
		
		@Override
		public void paint(Graphics g)
		{
			super.paint(g);
			g.setColor(fract);
			
			if(isTimerDelay)
			{
				t.start();
				g.drawImage(buffer, 0, 0, this);
			}
			else
			{
				if(isRainbowFract1)
				{
					for(int i=0;i<fractArray.size()-2;i+=2)
					{
						g.setColor(fractRainbow[rainbowIndex]);
						g.drawLine(fractArray.get(i), fractArray.get(i+1), fractArray.get(i+2), fractArray.get(i+3));
						//g.drawLine(c2.get(i), c2.get(i+1), c2.get(i+2), c2.get(i+3));
						//g.setColor(spectrum[359-x]);
						//g.drawLine(c3.get(i), c3.get(i+1), c3.get(i+2), c3.get(i+3));
						//g.drawLine(c4.get(i), c4.get(i+1), c4.get(i+2), c4.get(i+3));
						
						//4 is a color modifier to make it more or less random 
						//add a setting for the user to change this later
						if(rainbowIndex<359 && i%4==0)
						{
							rainbowIndex++;
						}
						else if(rainbowIndex>=359)
						{
							rainbowIndex=0;
						}
					}
				}
				else
				{
					for(int i=0;i<fractArray.size()-2;i+=2)
					{
						
						g.drawLine(fractArray.get(i), fractArray.get(i+1), fractArray.get(i+2), fractArray.get(i+3));
					}
				}
			}
			
		}
		@Override
		public void actionPerformed(ActionEvent e) 
		{
			nextLine(buffer.getGraphics());
		}

		private void nextLine(Graphics g) 
		{
			if(index<fractArray.size()-2)
			{
				if(isRainbowFract1)
				{
					g.setColor(fractRainbow[rainbowIndex]);
					g.drawLine(fractArray.get(index), fractArray.get(index+1), fractArray.get(index+2), fractArray.get(index+3));
					index+=2;
					if(rainbowIndex<359 && index%4==0)
					{
						rainbowIndex++;
					}
					else if(rainbowIndex>=359)
					{
						rainbowIndex=0;
					}
					
				}
				else
				{
					g.setColor(fractColor1);
					g.drawLine(fractArray.get(index), fractArray.get(index+1), fractArray.get(index+2), fractArray.get(index+3));
					index+=2;
				}
				repaint();
			}
			else
			{
				t.stop();
				index=0;
			}
		}
	}

	public GUIPanel getDrawingPanel() 
	{
		return drawing;
	}
	public JFrame getDrawingFrame()
	{
		return instructions;
	}

	public void disposeDrawing() 
	{
		instructions.dispose();
		settings.setVisible(true);
	}

	public void setFractColorArray(Color[] rainbow) 
	{
		fractRainbow=rainbow;
	}

	public void setRainbowBool(boolean b) 
	{
		isRainbowFract1=b;
	}

	

	
	
}
